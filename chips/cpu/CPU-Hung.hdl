// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
     
    // Registers
    ARegister(in = toARegister, load = WriteA, out = AOutput, out[0..14] = addressM);
    DRegister(in = ALUOutput, load = WriteD, out = DOutput);
    PC(in = AOutput, load = PCLoad, inc = true, reset = reset, out[0..14] = pc);
    
    // Muxes
    Mux16(a = ALUOutput, b = instruction, sel = isAInstruction, out = toARegister);
    Mux16(a = AOutput, b = inM, sel = isAOrM, out = toALU);  
    
    // Setting ALU outputs and inputs
    ALU(x = DOutput, y = toALU, zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], out = outM, out = ALUOutput, zr = zr, ng = ng);
    // Setting register inputs
    // Decoder
        // Determine what type of instruction is given, A or C
        Not(in = instruction[15], out = isAInstruction);
        // If is C instruction, determine wheter to load into DRegister
        And(a = instruction[15], b = instruction[4], out = WriteD);
        // If is A instruction, determine wheter to load into ARegister
        And(a = isCInstruction, b = instruction[5], out = WriteAifC);
        Or(a = isAInstruction, b = WriteAifC, out = WriteA);
        // PC Logic
            // Loaded if is a C type instruction
            Not(in = isAInstruction, out = isCInstruction);
                //JGT 
                    // Check if output is +ve
                    Or(a = zr, b = ng, out = state1);
                    Not(in = state1, out = positive);
                And(a = positive, b = instruction[0], out = JGT);

                // JEQ
                And(a = instruction[1], b = zr, out = JEQ);

                // JLT
                And(a = instruction[2], b = ng, out = JLT); 

                // JGE
                Or(a = JGT, b = JEQ, out = JGE);

                // JNE
                Or(a = JGT, b = JLT, out = JNE);

                // JLE
                Or(a = JLT, b = JEQ, out = JLE);

                // JMP
                Or(a = JGT, b = JLE, out = JMP);

                // Nester Or
                Or(a = JGT, b = JEQ, out = Jump1);
                Or(a = JLT, b = Jump1, out = Jump2);
                Or(a = JGE, b = Jump2, out = Jump3);
                Or(a = JNE, b = Jump3, out = Jump4);
                Or(a = JLE, b = Jump4, out = Jump5);
                Or(a = JMP, b = Jump5, out = Jump6);
                And(a = isCInstruction, b = Jump6, out = PCLoad);
    // isAOrM
    And(a = isCInstruction, b = instruction[12], out = isAOrM);

    // Load M or not ?
    And(a = isCInstruction, b = instruction[3], out = loadM, out = writeM);
}